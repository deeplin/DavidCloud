package com.async.davidconsole.dao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.async.davidconsole.dao.SensorRange;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SENSOR_RANGE".
*/
public class SensorRangeDao extends AbstractDao<SensorRange, Long> {

    public static final String TABLENAME = "SENSOR_RANGE";

    /**
     * Properties of entity SensorRange.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SkinUpper = new Property(1, int.class, "skinUpper", false, "SKIN_UPPER");
        public final static Property SkinLowerChinese = new Property(2, int.class, "skinLowerChinese", false, "SKIN_LOWER_CHINESE");
        public final static Property SkinLowerNonChinese = new Property(3, int.class, "skinLowerNonChinese", false, "SKIN_LOWER_NON_CHINESE");
        public final static Property AirUpper = new Property(4, int.class, "airUpper", false, "AIR_UPPER");
        public final static Property AirLower = new Property(5, int.class, "airLower", false, "AIR_LOWER");
        public final static Property Spo2UpperTop = new Property(6, int.class, "spo2UpperTop", false, "SPO2_UPPER_TOP");
        public final static Property Spo2UpperBottom = new Property(7, int.class, "spo2UpperBottom", false, "SPO2_UPPER_BOTTOM");
        public final static Property Spo2LowerTop = new Property(8, int.class, "spo2LowerTop", false, "SPO2_LOWER_TOP");
        public final static Property Spo2LowerBottom = new Property(9, int.class, "spo2LowerBottom", false, "SPO2_LOWER_BOTTOM");
        public final static Property PrUpperTop = new Property(10, int.class, "prUpperTop", false, "PR_UPPER_TOP");
        public final static Property PrUpperBottom = new Property(11, int.class, "prUpperBottom", false, "PR_UPPER_BOTTOM");
        public final static Property PrLowerTop = new Property(12, int.class, "prLowerTop", false, "PR_LOWER_TOP");
        public final static Property PrLowerBottom = new Property(13, int.class, "prLowerBottom", false, "PR_LOWER_BOTTOM");
        public final static Property OxygenUpper = new Property(14, int.class, "oxygenUpper", false, "OXYGEN_UPPER");
        public final static Property OxygenLower = new Property(15, int.class, "oxygenLower", false, "OXYGEN_LOWER");
        public final static Property HumidityUpper = new Property(16, int.class, "humidityUpper", false, "HUMIDITY_UPPER");
        public final static Property HumidityLower = new Property(17, int.class, "humidityLower", false, "HUMIDITY_LOWER");
        public final static Property LanguageIndex = new Property(18, byte.class, "languageIndex", false, "LANGUAGE_INDEX");
    }


    public SensorRangeDao(DaoConfig config) {
        super(config);
    }
    
    public SensorRangeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SENSOR_RANGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SKIN_UPPER\" INTEGER NOT NULL ," + // 1: skinUpper
                "\"SKIN_LOWER_CHINESE\" INTEGER NOT NULL ," + // 2: skinLowerChinese
                "\"SKIN_LOWER_NON_CHINESE\" INTEGER NOT NULL ," + // 3: skinLowerNonChinese
                "\"AIR_UPPER\" INTEGER NOT NULL ," + // 4: airUpper
                "\"AIR_LOWER\" INTEGER NOT NULL ," + // 5: airLower
                "\"SPO2_UPPER_TOP\" INTEGER NOT NULL ," + // 6: spo2UpperTop
                "\"SPO2_UPPER_BOTTOM\" INTEGER NOT NULL ," + // 7: spo2UpperBottom
                "\"SPO2_LOWER_TOP\" INTEGER NOT NULL ," + // 8: spo2LowerTop
                "\"SPO2_LOWER_BOTTOM\" INTEGER NOT NULL ," + // 9: spo2LowerBottom
                "\"PR_UPPER_TOP\" INTEGER NOT NULL ," + // 10: prUpperTop
                "\"PR_UPPER_BOTTOM\" INTEGER NOT NULL ," + // 11: prUpperBottom
                "\"PR_LOWER_TOP\" INTEGER NOT NULL ," + // 12: prLowerTop
                "\"PR_LOWER_BOTTOM\" INTEGER NOT NULL ," + // 13: prLowerBottom
                "\"OXYGEN_UPPER\" INTEGER NOT NULL ," + // 14: oxygenUpper
                "\"OXYGEN_LOWER\" INTEGER NOT NULL ," + // 15: oxygenLower
                "\"HUMIDITY_UPPER\" INTEGER NOT NULL ," + // 16: humidityUpper
                "\"HUMIDITY_LOWER\" INTEGER NOT NULL ," + // 17: humidityLower
                "\"LANGUAGE_INDEX\" INTEGER NOT NULL );"); // 18: languageIndex
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SENSOR_RANGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SensorRange entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSkinUpper());
        stmt.bindLong(3, entity.getSkinLowerChinese());
        stmt.bindLong(4, entity.getSkinLowerNonChinese());
        stmt.bindLong(5, entity.getAirUpper());
        stmt.bindLong(6, entity.getAirLower());
        stmt.bindLong(7, entity.getSpo2UpperTop());
        stmt.bindLong(8, entity.getSpo2UpperBottom());
        stmt.bindLong(9, entity.getSpo2LowerTop());
        stmt.bindLong(10, entity.getSpo2LowerBottom());
        stmt.bindLong(11, entity.getPrUpperTop());
        stmt.bindLong(12, entity.getPrUpperBottom());
        stmt.bindLong(13, entity.getPrLowerTop());
        stmt.bindLong(14, entity.getPrLowerBottom());
        stmt.bindLong(15, entity.getOxygenUpper());
        stmt.bindLong(16, entity.getOxygenLower());
        stmt.bindLong(17, entity.getHumidityUpper());
        stmt.bindLong(18, entity.getHumidityLower());
        stmt.bindLong(19, entity.getLanguageIndex());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SensorRange entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSkinUpper());
        stmt.bindLong(3, entity.getSkinLowerChinese());
        stmt.bindLong(4, entity.getSkinLowerNonChinese());
        stmt.bindLong(5, entity.getAirUpper());
        stmt.bindLong(6, entity.getAirLower());
        stmt.bindLong(7, entity.getSpo2UpperTop());
        stmt.bindLong(8, entity.getSpo2UpperBottom());
        stmt.bindLong(9, entity.getSpo2LowerTop());
        stmt.bindLong(10, entity.getSpo2LowerBottom());
        stmt.bindLong(11, entity.getPrUpperTop());
        stmt.bindLong(12, entity.getPrUpperBottom());
        stmt.bindLong(13, entity.getPrLowerTop());
        stmt.bindLong(14, entity.getPrLowerBottom());
        stmt.bindLong(15, entity.getOxygenUpper());
        stmt.bindLong(16, entity.getOxygenLower());
        stmt.bindLong(17, entity.getHumidityUpper());
        stmt.bindLong(18, entity.getHumidityLower());
        stmt.bindLong(19, entity.getLanguageIndex());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SensorRange readEntity(Cursor cursor, int offset) {
        SensorRange entity = new SensorRange( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // skinUpper
            cursor.getInt(offset + 2), // skinLowerChinese
            cursor.getInt(offset + 3), // skinLowerNonChinese
            cursor.getInt(offset + 4), // airUpper
            cursor.getInt(offset + 5), // airLower
            cursor.getInt(offset + 6), // spo2UpperTop
            cursor.getInt(offset + 7), // spo2UpperBottom
            cursor.getInt(offset + 8), // spo2LowerTop
            cursor.getInt(offset + 9), // spo2LowerBottom
            cursor.getInt(offset + 10), // prUpperTop
            cursor.getInt(offset + 11), // prUpperBottom
            cursor.getInt(offset + 12), // prLowerTop
            cursor.getInt(offset + 13), // prLowerBottom
            cursor.getInt(offset + 14), // oxygenUpper
            cursor.getInt(offset + 15), // oxygenLower
            cursor.getInt(offset + 16), // humidityUpper
            cursor.getInt(offset + 17), // humidityLower
            (byte) cursor.getShort(offset + 18) // languageIndex
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SensorRange entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSkinUpper(cursor.getInt(offset + 1));
        entity.setSkinLowerChinese(cursor.getInt(offset + 2));
        entity.setSkinLowerNonChinese(cursor.getInt(offset + 3));
        entity.setAirUpper(cursor.getInt(offset + 4));
        entity.setAirLower(cursor.getInt(offset + 5));
        entity.setSpo2UpperTop(cursor.getInt(offset + 6));
        entity.setSpo2UpperBottom(cursor.getInt(offset + 7));
        entity.setSpo2LowerTop(cursor.getInt(offset + 8));
        entity.setSpo2LowerBottom(cursor.getInt(offset + 9));
        entity.setPrUpperTop(cursor.getInt(offset + 10));
        entity.setPrUpperBottom(cursor.getInt(offset + 11));
        entity.setPrLowerTop(cursor.getInt(offset + 12));
        entity.setPrLowerBottom(cursor.getInt(offset + 13));
        entity.setOxygenUpper(cursor.getInt(offset + 14));
        entity.setOxygenLower(cursor.getInt(offset + 15));
        entity.setHumidityUpper(cursor.getInt(offset + 16));
        entity.setHumidityLower(cursor.getInt(offset + 17));
        entity.setLanguageIndex((byte) cursor.getShort(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SensorRange entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SensorRange entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SensorRange entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
