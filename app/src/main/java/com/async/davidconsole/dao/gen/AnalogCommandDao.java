package com.async.davidconsole.dao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.async.davidconsole.dao.AnalogCommand;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ANALOG_COMMAND".
*/
public class AnalogCommandDao extends AbstractDao<AnalogCommand, Long> {

    public static final String TABLENAME = "ANALOG_COMMAND";

    /**
     * Properties of entity AnalogCommand.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Time = new Property(1, long.class, "time", false, "TIME");
        public final static Property S1A = new Property(2, int.class, "S1A", false, "S1_A");
        public final static Property S1B = new Property(3, int.class, "S1B", false, "S1_B");
        public final static Property S2 = new Property(4, int.class, "S2", false, "S2");
        public final static Property S3 = new Property(5, int.class, "S3", false, "S3");
        public final static Property A1 = new Property(6, int.class, "A1", false, "A1");
        public final static Property A2 = new Property(7, int.class, "A2", false, "A2");
        public final static Property A3 = new Property(8, int.class, "A3", false, "A3");
        public final static Property F1 = new Property(9, int.class, "F1", false, "F1");
        public final static Property H1 = new Property(10, int.class, "H1", false, "H1");
        public final static Property O1 = new Property(11, int.class, "O1", false, "O1");
        public final static Property O2 = new Property(12, int.class, "O2", false, "O2");
        public final static Property O3 = new Property(13, int.class, "O3", false, "O3");
        public final static Property SP = new Property(14, int.class, "SP", false, "SP");
        public final static Property PR = new Property(15, int.class, "PR", false, "PR");
        public final static Property PI = new Property(16, int.class, "PI", false, "PI");
        public final static Property VB = new Property(17, int.class, "VB", false, "VB");
        public final static Property VR = new Property(18, int.class, "VR", false, "VR");
        public final static Property VU = new Property(19, int.class, "VU", false, "VU");
        public final static Property T1 = new Property(20, int.class, "T1", false, "T1");
        public final static Property T2 = new Property(21, int.class, "T2", false, "T2");
        public final static Property T3 = new Property(22, int.class, "T3", false, "T3");
    }


    public AnalogCommandDao(DaoConfig config) {
        super(config);
    }
    
    public AnalogCommandDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ANALOG_COMMAND\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TIME\" INTEGER NOT NULL ," + // 1: time
                "\"S1_A\" INTEGER NOT NULL ," + // 2: S1A
                "\"S1_B\" INTEGER NOT NULL ," + // 3: S1B
                "\"S2\" INTEGER NOT NULL ," + // 4: S2
                "\"S3\" INTEGER NOT NULL ," + // 5: S3
                "\"A1\" INTEGER NOT NULL ," + // 6: A1
                "\"A2\" INTEGER NOT NULL ," + // 7: A2
                "\"A3\" INTEGER NOT NULL ," + // 8: A3
                "\"F1\" INTEGER NOT NULL ," + // 9: F1
                "\"H1\" INTEGER NOT NULL ," + // 10: H1
                "\"O1\" INTEGER NOT NULL ," + // 11: O1
                "\"O2\" INTEGER NOT NULL ," + // 12: O2
                "\"O3\" INTEGER NOT NULL ," + // 13: O3
                "\"SP\" INTEGER NOT NULL ," + // 14: SP
                "\"PR\" INTEGER NOT NULL ," + // 15: PR
                "\"PI\" INTEGER NOT NULL ," + // 16: PI
                "\"VB\" INTEGER NOT NULL ," + // 17: VB
                "\"VR\" INTEGER NOT NULL ," + // 18: VR
                "\"VU\" INTEGER NOT NULL ," + // 19: VU
                "\"T1\" INTEGER NOT NULL ," + // 20: T1
                "\"T2\" INTEGER NOT NULL ," + // 21: T2
                "\"T3\" INTEGER NOT NULL );"); // 22: T3
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ANALOG_COMMAND\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AnalogCommand entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTime());
        stmt.bindLong(3, entity.getS1A());
        stmt.bindLong(4, entity.getS1B());
        stmt.bindLong(5, entity.getS2());
        stmt.bindLong(6, entity.getS3());
        stmt.bindLong(7, entity.getA1());
        stmt.bindLong(8, entity.getA2());
        stmt.bindLong(9, entity.getA3());
        stmt.bindLong(10, entity.getF1());
        stmt.bindLong(11, entity.getH1());
        stmt.bindLong(12, entity.getO1());
        stmt.bindLong(13, entity.getO2());
        stmt.bindLong(14, entity.getO3());
        stmt.bindLong(15, entity.getSP());
        stmt.bindLong(16, entity.getPR());
        stmt.bindLong(17, entity.getPI());
        stmt.bindLong(18, entity.getVB());
        stmt.bindLong(19, entity.getVR());
        stmt.bindLong(20, entity.getVU());
        stmt.bindLong(21, entity.getT1());
        stmt.bindLong(22, entity.getT2());
        stmt.bindLong(23, entity.getT3());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AnalogCommand entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTime());
        stmt.bindLong(3, entity.getS1A());
        stmt.bindLong(4, entity.getS1B());
        stmt.bindLong(5, entity.getS2());
        stmt.bindLong(6, entity.getS3());
        stmt.bindLong(7, entity.getA1());
        stmt.bindLong(8, entity.getA2());
        stmt.bindLong(9, entity.getA3());
        stmt.bindLong(10, entity.getF1());
        stmt.bindLong(11, entity.getH1());
        stmt.bindLong(12, entity.getO1());
        stmt.bindLong(13, entity.getO2());
        stmt.bindLong(14, entity.getO3());
        stmt.bindLong(15, entity.getSP());
        stmt.bindLong(16, entity.getPR());
        stmt.bindLong(17, entity.getPI());
        stmt.bindLong(18, entity.getVB());
        stmt.bindLong(19, entity.getVR());
        stmt.bindLong(20, entity.getVU());
        stmt.bindLong(21, entity.getT1());
        stmt.bindLong(22, entity.getT2());
        stmt.bindLong(23, entity.getT3());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AnalogCommand readEntity(Cursor cursor, int offset) {
        AnalogCommand entity = new AnalogCommand( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // time
            cursor.getInt(offset + 2), // S1A
            cursor.getInt(offset + 3), // S1B
            cursor.getInt(offset + 4), // S2
            cursor.getInt(offset + 5), // S3
            cursor.getInt(offset + 6), // A1
            cursor.getInt(offset + 7), // A2
            cursor.getInt(offset + 8), // A3
            cursor.getInt(offset + 9), // F1
            cursor.getInt(offset + 10), // H1
            cursor.getInt(offset + 11), // O1
            cursor.getInt(offset + 12), // O2
            cursor.getInt(offset + 13), // O3
            cursor.getInt(offset + 14), // SP
            cursor.getInt(offset + 15), // PR
            cursor.getInt(offset + 16), // PI
            cursor.getInt(offset + 17), // VB
            cursor.getInt(offset + 18), // VR
            cursor.getInt(offset + 19), // VU
            cursor.getInt(offset + 20), // T1
            cursor.getInt(offset + 21), // T2
            cursor.getInt(offset + 22) // T3
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AnalogCommand entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(cursor.getLong(offset + 1));
        entity.setS1A(cursor.getInt(offset + 2));
        entity.setS1B(cursor.getInt(offset + 3));
        entity.setS2(cursor.getInt(offset + 4));
        entity.setS3(cursor.getInt(offset + 5));
        entity.setA1(cursor.getInt(offset + 6));
        entity.setA2(cursor.getInt(offset + 7));
        entity.setA3(cursor.getInt(offset + 8));
        entity.setF1(cursor.getInt(offset + 9));
        entity.setH1(cursor.getInt(offset + 10));
        entity.setO1(cursor.getInt(offset + 11));
        entity.setO2(cursor.getInt(offset + 12));
        entity.setO3(cursor.getInt(offset + 13));
        entity.setSP(cursor.getInt(offset + 14));
        entity.setPR(cursor.getInt(offset + 15));
        entity.setPI(cursor.getInt(offset + 16));
        entity.setVB(cursor.getInt(offset + 17));
        entity.setVR(cursor.getInt(offset + 18));
        entity.setVU(cursor.getInt(offset + 19));
        entity.setT1(cursor.getInt(offset + 20));
        entity.setT2(cursor.getInt(offset + 21));
        entity.setT3(cursor.getInt(offset + 22));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AnalogCommand entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AnalogCommand entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AnalogCommand entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
